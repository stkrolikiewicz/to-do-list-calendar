"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
var helper_module_imports_1 = require("@babel/helper-module-imports");
var types_1 = require("@babel/types");
var nodePath = require("path");
function functionDeclarationToExpression(declaration) {
    return types_1.functionExpression(declaration.id, declaration.params, declaration.body, declaration.generator, declaration.async);
}
function classDeclarationToExpression(declaration) {
    return types_1.classExpression(declaration.id, declaration.superClass, declaration.body, declaration.decorators);
}
function getFileName(state) {
    var filename = state.filename, cwd = state.cwd;
    if (!filename) {
        return undefined;
    }
    if (cwd && filename.startsWith(cwd)) {
        return filename.slice(cwd.length);
    }
    return filename;
}
var functionsToReplace = ['getServerSideProps', 'getStaticProps'];
function transformPropGetters(path, transform) {
    var node = path.node;
    if (types_1.isFunctionDeclaration(node.declaration)) {
        var functionId = node.declaration.id;
        if (!functionId) {
            return;
        }
        if (!functionsToReplace.includes(functionId.name)) {
            return;
        }
        node.declaration = types_1.variableDeclaration('const', [
            types_1.variableDeclarator(functionId, transform(functionDeclarationToExpression(node.declaration))),
        ]);
        return 'found';
    }
    if (types_1.isVariableDeclaration(node.declaration)) {
        for (var _i = 0, _a = node.declaration.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            if (types_1.isIdentifier(declaration.id) &&
                functionsToReplace.includes(declaration.id.name) &&
                declaration.init) {
                declaration.init = transform(declaration.init);
                return 'found';
            }
        }
    }
}
function addWithSuperJSONPropsImport(path) {
    return helper_module_imports_1.addNamed(path, 'withSuperJSONProps', 'babel-plugin-superjson-next/tools');
}
function addWithSuperJSONPageImport(path) {
    return helper_module_imports_1.addNamed(path, 'withSuperJSONPage', 'babel-plugin-superjson-next/tools');
}
function wrapExportDefaultDeclaration(path) {
    function wrapInHOC(expr) {
        return types_1.callExpression(addWithSuperJSONPageImport(path), [expr]);
    }
    var node = path.node;
    if (types_1.isFunctionDeclaration(node.declaration) ||
        types_1.isClassDeclaration(node.declaration)) {
        if (node.declaration.id) {
            path.replaceInline(node.declaration);
            path.parentPath.pushContainer('body', types_1.exportDefaultDeclaration(wrapInHOC(node.declaration.id)));
        }
        else {
            if (types_1.isFunctionDeclaration(node.declaration)) {
                node.declaration = wrapInHOC(functionDeclarationToExpression(node.declaration));
            }
            else {
                node.declaration = wrapInHOC(classDeclarationToExpression(node.declaration));
            }
        }
    }
    else {
        node.declaration = wrapInHOC(node.declaration);
    }
}
var filesToSkip = (_a = []).concat.apply(_a, ['_app', '_document', '_error'].map(function (name) { return [
    name + '.js',
    name + '.jsx',
    name + '.ts',
    name + '.tsx',
]; }));
/**
 * transforms `export { default } from ".."` import & export line
 */
function transformImportExportDefault(paths) {
    for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
        var path = paths_1[_i];
        if (types_1.isExportNamedDeclaration(path)) {
            for (var _a = 0, _b = path.node.specifiers; _a < _b.length; _a++) {
                var specifier = _b[_a];
                if (specifier.local.name === 'default') {
                    var exportIdentifier = types_1.identifier('__superjsonLocalExport');
                    path.insertAfter(types_1.exportDefaultDeclaration(exportIdentifier));
                    path.insertAfter(types_1.importDeclaration([types_1.importDefaultSpecifier(exportIdentifier)], path.node.source));
                    path.node.specifiers.splice(path.node.specifiers.indexOf(specifier), 1);
                    if (path.node.specifiers.length === 0) {
                        path.remove();
                    }
                }
            }
        }
    }
}
/**
 * transforms `export { getServerSideProps }` import & export line
 */
function transformDatafetcherNamedImportExports(paths, dataFetcherName) {
    for (var _i = 0, paths_2 = paths; _i < paths_2.length; _i++) {
        var path = paths_2[_i];
        if (types_1.isExportNamedDeclaration(path)) {
            for (var _a = 0, _b = path.node.specifiers; _a < _b.length; _a++) {
                var specifier = _b[_a];
                if (specifier.local.name === dataFetcherName) {
                    paths.forEach(function (path) {
                        return path.traverse({
                            ImportSpecifier: function (specifier) {
                                if (specifier.node.imported.name === dataFetcherName) {
                                    specifier.node.local.name = "_" + dataFetcherName;
                                }
                            },
                        });
                    });
                    path.insertAfter(types_1.exportNamedDeclaration(types_1.variableDeclaration('const', [
                        types_1.variableDeclarator(types_1.identifier(dataFetcherName), types_1.identifier("_" + dataFetcherName)),
                    ])));
                    path.node.specifiers.splice(path.node.specifiers.indexOf(specifier), 1);
                    if (path.node.specifiers.length === 0) {
                        path.remove();
                    }
                }
            }
        }
    }
}
function shouldBeSkipped(filePath) {
    if (!filePath.includes('pages' + nodePath.sep)) {
        return true;
    }
    if (filePath.includes('pages' + nodePath.sep + 'api' + nodePath.sep)) {
        return true;
    }
    return filesToSkip.some(function (fileToSkip) { return filePath.includes(fileToSkip); });
}
function superJsonWithNext() {
    return {
        name: 'add superjson to pages with prop getters',
        visitor: {
            Program: function (path, state) {
                var _a;
                var propsToBeExcluded = state.opts.exclude;
                var filePath = (_a = getFileName(state)) !== null && _a !== void 0 ? _a : nodePath.join('pages', 'Default.js');
                if (shouldBeSkipped(filePath)) {
                    return;
                }
                transformImportExportDefault(path.get('body'));
                transformDatafetcherNamedImportExports(path.get('body'), 'getServerSideProps');
                transformDatafetcherNamedImportExports(path.get('body'), 'getStaticProps');
                var body = path.get('body');
                var exportDefaultDeclaration = body.find(function (path) {
                    return types_1.isExportDefaultDeclaration(path);
                });
                if (!exportDefaultDeclaration) {
                    return;
                }
                var namedExportDeclarations = body
                    .filter(function (path) { return path.isExportNamedDeclaration(); })
                    .map(function (path) { return path; });
                var containsNextTag = namedExportDeclarations.some(function (path) {
                    return (types_1.isVariableDeclaration(path.node.declaration) &&
                        path.node.declaration.declarations.some(function (decl) { return types_1.isIdentifier(decl.id) && decl.id.name.startsWith('__N_'); }));
                });
                var transformedOne = false;
                namedExportDeclarations.forEach(function (path) {
                    var found = transformPropGetters(path, function (decl) {
                        return types_1.callExpression(addWithSuperJSONPropsImport(path), [
                            decl,
                            types_1.arrayExpression(propsToBeExcluded === null || propsToBeExcluded === void 0 ? void 0 : propsToBeExcluded.map(function (prop) { return types_1.stringLiteral(prop); })),
                        ]);
                    });
                    if (found === 'found') {
                        transformedOne = true;
                    }
                });
                if (!transformedOne && !containsNextTag) {
                    return;
                }
                wrapExportDefaultDeclaration(exportDefaultDeclaration);
            },
        },
    };
}
exports.default = superJsonWithNext;
//# sourceMappingURL=index.js.map